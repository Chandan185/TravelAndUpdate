{"version":3,"file":"static/js/322.f7153961.chunk.js","mappings":"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","sources":["shared/Components/FormComponents/ImageUpload.js","shared/Components/FormComponents/Input.js","shared/Components/UIElement/Card.js","shared/Components/util/Validate.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/Hooks/Form-hook.js","users/pages/Authenticate.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/Validate\";\r\nimport \"./Input.css\";\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nconst Input = (props) => {\r\n  const [inputstate, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputstate;\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n  const focusHandler = () => {\r\n    dispatch({ type: \"TOUCH\" });\r\n  };\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={focusHandler}\r\n        value={inputstate.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={focusHandler}\r\n        value={inputstate.value}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputstate.isValid && inputstate.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputstate.isValid && inputstate.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\nexport default Input;\r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useCallback, useReducer } from \"react\";\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      //overall form validity is checked here\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const useForm = (initialinputs, initialValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialinputs,\r\n    isValid: initialValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport Input from \"../../shared/Components/FormComponents/Input\";\r\nimport \"../../places/pages/NewPlace.css\";\r\nimport { useForm } from \"../../shared/Hooks/Form-hook\";\r\nimport Card from \"../../shared/Components/UIElement/Card\";\r\nimport \"./Authentication.css\";\r\nimport AuthContext from \"../../shared/Components/context/Auth-context\";\r\nimport { useHttpClient } from \"../../shared/Hooks/http-hook\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/Components/util/Validate\";\r\nimport Button from \"../../shared/Components/FormComponents/Button\";\r\nimport LoadingSpinner from \"../../shared/Components/UIElement/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/Components/UIElement/ErrorModal\";\r\nimport ImageUpload from \"../../shared/Components/FormComponents/ImageUpload\";\r\n// const Auth = () => {\r\n//   const auth = useContext(AuthContext);\r\n//   const [isLoginMode, setIsLoginMode] = useState(true);\r\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n//   const [formState, inputHandler, setFormData] = useForm(\r\n//     {\r\n//       email: {\r\n//         value: \"\",\r\n//         isValid: false,\r\n//       },\r\n//       password: {\r\n//         value: \"\",\r\n//         isValid: false,\r\n//       },\r\n//     },\r\n//     false\r\n//   );\r\n\r\n//   const switchModeHandler = () => {\r\n//     if (!isLoginMode) {\r\n//       setFormData(\r\n//         {\r\n//           ...formState.inputs,\r\n//           name: undefined,\r\n//           image: undefined,\r\n//         },\r\n//         formState.inputs.email.isValid && formState.inputs.password.isValid\r\n//       );\r\n//     } else {\r\n//       setFormData(\r\n//         {\r\n//           ...formState.inputs,\r\n//           name: {\r\n//             value: \"\",\r\n//             isValid: false,\r\n//           },\r\n//           image: {\r\n//             value: null,\r\n//             isValid: false,\r\n//           },\r\n//         },\r\n//         false\r\n//       );\r\n//     }\r\n//     setIsLoginMode((prevMode) => !prevMode);\r\n//   };\r\n\r\n//   const authSubmitHandler = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (isLoginMode) {\r\n//       try {\r\n//         const ResponseData = await sendRequest(\r\n//           process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n//           \"POST\",\r\n//           JSON.stringify({\r\n//             email: formState.inputs.email.value,\r\n//             password: formState.inputs.password.value,\r\n//           }),\r\n//           {\r\n//             \"Content-Type\": \"application/json\",\r\n//           }\r\n//         );\r\n//         auth.login(ResponseData.userId, ResponseData.token);\r\n//       } catch (err) {}\r\n//     } else {\r\n//       try {\r\n//         const formData = new FormData();\r\n//         formData.append(\"name\", formState.inputs.name.value);\r\n//         formData.append(\"email\", formState.inputs.email.value);\r\n//         formData.append(\"password\", formState.inputs.password.value);\r\n//         formData.append(\"image\", formState.inputs.image.value);\r\n//         const ResponseData = await sendRequest(\r\n//           process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n//           \"POST\",\r\n//           JSON.stringify({\r\n//             name: formState.inputs.name.value,\r\n//             email: formState.inputs.email.value,\r\n//             password: formState.inputs.password.value,\r\n//           })\r\n//         );\r\n\r\n//         auth.login(ResponseData.userId, ResponseData.token);\r\n//       } catch (err) {}\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       {error && <ErrorModal error={error} onClear={clearError} />}\r\n//       <Card className=\"authentication\">\r\n//         {isLoading && <LoadingSpinner asOverlay />}\r\n//         <h2>Login Required</h2>\r\n//         <hr />\r\n//         <form onSubmit={authSubmitHandler}>\r\n//           {!isLoginMode && (\r\n//             <Input\r\n//               element=\"input\"\r\n//               id=\"name\"\r\n//               type=\"text\"\r\n//               label=\"Your Name\"\r\n//               validators={[VALIDATOR_REQUIRE()]}\r\n//               errorText=\"Please enter a name.\"\r\n//               onInput={inputHandler}\r\n//             />\r\n//           )}\r\n//           {!isLoginMode && (\r\n//             <ImageUpload\r\n//               center\r\n//               id=\"image\"\r\n//               onInput={inputHandler}\r\n//               errorText=\"Please provide an image\"\r\n//             />\r\n//           )}\r\n//           <Input\r\n//             element=\"input\"\r\n//             id=\"email\"\r\n//             type=\"email\"\r\n//             label=\"E-Mail\"\r\n//             validators={[VALIDATOR_EMAIL()]}\r\n//             errorText=\"Please enter a valid email address.\"\r\n//             onInput={inputHandler}\r\n//           />\r\n//           <Input\r\n//             element=\"input\"\r\n//             id=\"password\"\r\n//             type=\"password\"\r\n//             label=\"Password\"\r\n//             validators={[VALIDATOR_MINLENGTH(6)]}\r\n//             errorText=\"Please enter a valid password, at least 6 characters.\"\r\n//             onInput={inputHandler}\r\n//           />\r\n//           <Button type=\"submit\" disabled={!formState.isValid}>\r\n//             {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n//           </Button>\r\n//         </form>\r\n//         <Button inverse onClick={switchModeHandler}>\r\n//           SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n//         </Button>\r\n//       </Card>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default Auth;\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        console.log(formData);\r\n        const responseData = await sendRequest(\r\n          \"http://localhost:5000/api/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image.\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputstate","dispatch","changeHandler","focusHandler","element","placeholder","onBlur","rows","htmlFor","label","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","validator","trim","test","formReducer","formIsValid","inputId","inputs","useForm","initialinputs","initialValidity","formState","useCallback","inputData","formValidity","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","preventDefault","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","console","log","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode"],"sourceRoot":""}